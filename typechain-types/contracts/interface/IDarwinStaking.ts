/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IDarwinStakingInterface extends utils.Interface {
  functions: {};

  events: {
    "Stake(address,uint256)": EventFragment;
    "StakeEvoture(address,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
    "WithdrawEvoture(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeEvoture"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawEvoture"): EventFragment;
}

export interface StakeEventObject {
  user: string;
  amount: BigNumber;
}
export type StakeEvent = TypedEvent<[string, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface StakeEvotureEventObject {
  user: string;
  evotureTokenId: BigNumber;
  multiplier: BigNumber;
}
export type StakeEvotureEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeEvotureEventObject
>;

export type StakeEvotureEventFilter = TypedEventFilter<StakeEvotureEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
  rewards: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawEvotureEventObject {
  user: string;
  evotureTokenId: BigNumber;
}
export type WithdrawEvotureEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEvotureEventObject
>;

export type WithdrawEvotureEventFilter = TypedEventFilter<WithdrawEvotureEvent>;

export interface IDarwinStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDarwinStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Stake(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): StakeEventFilter;
    Stake(
      user?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): StakeEventFilter;

    "StakeEvoture(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      evotureTokenId?: PromiseOrValue<BigNumberish> | null,
      multiplier?: PromiseOrValue<BigNumberish> | null
    ): StakeEvotureEventFilter;
    StakeEvoture(
      user?: PromiseOrValue<string> | null,
      evotureTokenId?: PromiseOrValue<BigNumberish> | null,
      multiplier?: PromiseOrValue<BigNumberish> | null
    ): StakeEvotureEventFilter;

    "Withdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      rewards?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      rewards?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter;

    "WithdrawEvoture(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      evotureTokenId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEvotureEventFilter;
    WithdrawEvoture(
      user?: PromiseOrValue<string> | null,
      evotureTokenId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEvotureEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
