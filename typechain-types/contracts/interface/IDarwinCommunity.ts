/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IDarwinCommunityInterface extends utils.Interface {
  functions: {
    "setDarwinAddress(address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "setDarwinAddress"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setDarwinAddress",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "setDarwinAddress",
    data: BytesLike
  ): Result;

  events: {
    "ActiveFundCandidateAdded(uint256)": EventFragment;
    "ActiveFundCandidateRemoved(uint256)": EventFragment;
    "CommunityFundDistributed(uint256,uint256[],uint256[])": EventFragment;
    "ExecuteTransaction(uint256,bytes32,address,uint256,string,bytes)": EventFragment;
    "FundCandidateDeactivated(uint256)": EventFragment;
    "NewFundCandidate(uint256,address,string)": EventFragment;
    "ProposalCanceled(uint256)": EventFragment;
    "ProposalCreated(uint256,address,uint256,uint256,string,string,string)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "ProposalFirstCallExecuted(uint256)": EventFragment;
    "VoteCast(address,uint256,bool)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActiveFundCandidateAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActiveFundCandidateRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommunityFundDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundCandidateDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFundCandidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalFirstCallExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ActiveFundCandidateAddedEventObject {
  id: BigNumber;
}
export type ActiveFundCandidateAddedEvent = TypedEvent<
  [BigNumber],
  ActiveFundCandidateAddedEventObject
>;

export type ActiveFundCandidateAddedEventFilter =
  TypedEventFilter<ActiveFundCandidateAddedEvent>;

export interface ActiveFundCandidateRemovedEventObject {
  id: BigNumber;
}
export type ActiveFundCandidateRemovedEvent = TypedEvent<
  [BigNumber],
  ActiveFundCandidateRemovedEventObject
>;

export type ActiveFundCandidateRemovedEventFilter =
  TypedEventFilter<ActiveFundCandidateRemovedEvent>;

export interface CommunityFundDistributedEventObject {
  fundWeek: BigNumber;
  candidates: BigNumber[];
  tokens: BigNumber[];
}
export type CommunityFundDistributedEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[]],
  CommunityFundDistributedEventObject
>;

export type CommunityFundDistributedEventFilter =
  TypedEventFilter<CommunityFundDistributedEvent>;

export interface ExecuteTransactionEventObject {
  id: BigNumber;
  txHash: string;
  target: string;
  value: BigNumber;
  signature: string;
  data: string;
}
export type ExecuteTransactionEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string, string],
  ExecuteTransactionEventObject
>;

export type ExecuteTransactionEventFilter =
  TypedEventFilter<ExecuteTransactionEvent>;

export interface FundCandidateDeactivatedEventObject {
  id: BigNumber;
}
export type FundCandidateDeactivatedEvent = TypedEvent<
  [BigNumber],
  FundCandidateDeactivatedEventObject
>;

export type FundCandidateDeactivatedEventFilter =
  TypedEventFilter<FundCandidateDeactivatedEvent>;

export interface NewFundCandidateEventObject {
  id: BigNumber;
  valueAddress: string;
  proposal: string;
}
export type NewFundCandidateEvent = TypedEvent<
  [BigNumber, string, string],
  NewFundCandidateEventObject
>;

export type NewFundCandidateEventFilter =
  TypedEventFilter<NewFundCandidateEvent>;

export interface ProposalCanceledEventObject {
  id: BigNumber;
}
export type ProposalCanceledEvent = TypedEvent<
  [BigNumber],
  ProposalCanceledEventObject
>;

export type ProposalCanceledEventFilter =
  TypedEventFilter<ProposalCanceledEvent>;

export interface ProposalCreatedEventObject {
  id: BigNumber;
  proposer: string;
  startTime: BigNumber;
  endTime: BigNumber;
  title: string;
  description: string;
  other: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string, string, string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  id: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface ProposalFirstCallExecutedEventObject {
  id: BigNumber;
}
export type ProposalFirstCallExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalFirstCallExecutedEventObject
>;

export type ProposalFirstCallExecutedEventFilter =
  TypedEventFilter<ProposalFirstCallExecutedEvent>;

export interface VoteCastEventObject {
  voter: string;
  proposalId: BigNumber;
  inSupport: boolean;
}
export type VoteCastEvent = TypedEvent<
  [string, BigNumber, boolean],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface WithdrawEventObject {
  user: string;
  darwinAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IDarwinCommunity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDarwinCommunityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setDarwinAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  setDarwinAddress(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setDarwinAddress(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ActiveFundCandidateAdded(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ActiveFundCandidateAddedEventFilter;
    ActiveFundCandidateAdded(
      id?: PromiseOrValue<BigNumberish> | null
    ): ActiveFundCandidateAddedEventFilter;

    "ActiveFundCandidateRemoved(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ActiveFundCandidateRemovedEventFilter;
    ActiveFundCandidateRemoved(
      id?: PromiseOrValue<BigNumberish> | null
    ): ActiveFundCandidateRemovedEventFilter;

    "CommunityFundDistributed(uint256,uint256[],uint256[])"(
      fundWeek?: null,
      candidates?: null,
      tokens?: null
    ): CommunityFundDistributedEventFilter;
    CommunityFundDistributed(
      fundWeek?: null,
      candidates?: null,
      tokens?: null
    ): CommunityFundDistributedEventFilter;

    "ExecuteTransaction(uint256,bytes32,address,uint256,string,bytes)"(
      id?: PromiseOrValue<BigNumberish> | null,
      txHash?: PromiseOrValue<BytesLike> | null,
      target?: PromiseOrValue<string> | null,
      value?: null,
      signature?: null,
      data?: null
    ): ExecuteTransactionEventFilter;
    ExecuteTransaction(
      id?: PromiseOrValue<BigNumberish> | null,
      txHash?: PromiseOrValue<BytesLike> | null,
      target?: PromiseOrValue<string> | null,
      value?: null,
      signature?: null,
      data?: null
    ): ExecuteTransactionEventFilter;

    "FundCandidateDeactivated(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): FundCandidateDeactivatedEventFilter;
    FundCandidateDeactivated(
      id?: PromiseOrValue<BigNumberish> | null
    ): FundCandidateDeactivatedEventFilter;

    "NewFundCandidate(uint256,address,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      valueAddress?: null,
      proposal?: null
    ): NewFundCandidateEventFilter;
    NewFundCandidate(
      id?: PromiseOrValue<BigNumberish> | null,
      valueAddress?: null,
      proposal?: null
    ): NewFundCandidateEventFilter;

    "ProposalCanceled(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalCanceledEventFilter;
    ProposalCanceled(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalCanceledEventFilter;

    "ProposalCreated(uint256,address,uint256,uint256,string,string,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      proposer?: PromiseOrValue<string> | null,
      startTime?: null,
      endTime?: null,
      title?: null,
      description?: null,
      other?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      proposer?: PromiseOrValue<string> | null,
      startTime?: null,
      endTime?: null,
      title?: null,
      description?: null,
      other?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter;

    "ProposalFirstCallExecuted(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalFirstCallExecutedEventFilter;
    ProposalFirstCallExecuted(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalFirstCallExecutedEventFilter;

    "VoteCast(address,uint256,bool)"(
      voter?: PromiseOrValue<string> | null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      inSupport?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: PromiseOrValue<string> | null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      inSupport?: null
    ): VoteCastEventFilter;

    "Withdraw(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      darwinAmount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      darwinAmount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    setDarwinAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setDarwinAddress(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
