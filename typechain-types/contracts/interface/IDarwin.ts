/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IDarwinInterface extends utils.Interface {
  functions: {
    "MAX_SUPPLY()": FunctionFragment;
    "bulkTransfer(address[],uint256[])": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "communityPause()": FunctionFragment;
    "communityUnPause()": FunctionFragment;
    "distributeRewards(uint256)": FunctionFragment;
    "isPaused()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "registerDarwinSwapPair(address)": FunctionFragment;
    "setDarwinStaking(address)": FunctionFragment;
    "setDarwinSwapFactory(address)": FunctionFragment;
    "setMaintenance(address,bool)": FunctionFragment;
    "setMasterChef(address)": FunctionFragment;
    "setMinter(address,bool)": FunctionFragment;
    "setReceiveRewards(address,bool)": FunctionFragment;
    "setSecurity(address,bool)": FunctionFragment;
    "setUpgrader(address,bool)": FunctionFragment;
    "stakedDarwin()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_SUPPLY"
      | "bulkTransfer"
      | "burn"
      | "communityPause"
      | "communityUnPause"
      | "distributeRewards"
      | "isPaused"
      | "mint"
      | "registerDarwinSwapPair"
      | "setDarwinStaking"
      | "setDarwinSwapFactory"
      | "setMaintenance"
      | "setMasterChef"
      | "setMinter"
      | "setReceiveRewards"
      | "setSecurity"
      | "setUpgrader"
      | "stakedDarwin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bulkTransfer",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "communityPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "communityUnPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDarwinSwapPair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDarwinStaking",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDarwinSwapFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaintenance",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMasterChef",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiveRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecurity",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgrader",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedDarwin",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_SUPPLY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "communityPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityUnPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDarwinSwapPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDarwinStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDarwinSwapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaintenance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMasterChef",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecurity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpgrader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedDarwin",
    data: BytesLike
  ): Result;

  events: {
    "ExcludedFromReflection(address,bool)": EventFragment;
    "SetPaused(uint256)": EventFragment;
    "SetUnpaused(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExcludedFromReflection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUnpaused"): EventFragment;
}

export interface ExcludedFromReflectionEventObject {
  account: string;
  isExcluded: boolean;
}
export type ExcludedFromReflectionEvent = TypedEvent<
  [string, boolean],
  ExcludedFromReflectionEventObject
>;

export type ExcludedFromReflectionEventFilter =
  TypedEventFilter<ExcludedFromReflectionEvent>;

export interface SetPausedEventObject {
  timestamp: BigNumber;
}
export type SetPausedEvent = TypedEvent<[BigNumber], SetPausedEventObject>;

export type SetPausedEventFilter = TypedEventFilter<SetPausedEvent>;

export interface SetUnpausedEventObject {
  timestamp: BigNumber;
}
export type SetUnpausedEvent = TypedEvent<[BigNumber], SetUnpausedEventObject>;

export type SetUnpausedEventFilter = TypedEventFilter<SetUnpausedEvent>;

export interface IDarwin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDarwinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<[BigNumber]>;

    bulkTransfer(
      recipients: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    communityPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    communityUnPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeRewards(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerDarwinSwapPair(
      _pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDarwinStaking(
      _darwinStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDarwinSwapFactory(
      _darwinSwapFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaintenance(
      _addr: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMasterChef(
      _masterChef: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinter(
      user_: PromiseOrValue<string>,
      canMint_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReceiveRewards(
      account: PromiseOrValue<string>,
      shouldReceive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSecurity(
      _addr: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUpgrader(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakedDarwin(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  bulkTransfer(
    recipients: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burn(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  communityPause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  communityUnPause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeRewards(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  mint(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerDarwinSwapPair(
    _pair: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDarwinStaking(
    _darwinStaking: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDarwinSwapFactory(
    _darwinSwapFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaintenance(
    _addr: PromiseOrValue<string>,
    _hasRole: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMasterChef(
    _masterChef: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinter(
    user_: PromiseOrValue<string>,
    canMint_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReceiveRewards(
    account: PromiseOrValue<string>,
    shouldReceive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSecurity(
    _addr: PromiseOrValue<string>,
    _hasRole: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUpgrader(
    _account: PromiseOrValue<string>,
    _hasRole: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakedDarwin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    bulkTransfer(
      recipients: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    communityPause(overrides?: CallOverrides): Promise<void>;

    communityUnPause(overrides?: CallOverrides): Promise<void>;

    distributeRewards(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    mint(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerDarwinSwapPair(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDarwinStaking(
      _darwinStaking: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDarwinSwapFactory(
      _darwinSwapFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaintenance(
      _addr: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMasterChef(
      _masterChef: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinter(
      user_: PromiseOrValue<string>,
      canMint_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReceiveRewards(
      account: PromiseOrValue<string>,
      shouldReceive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSecurity(
      _addr: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpgrader(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedDarwin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ExcludedFromReflection(address,bool)"(
      account?: null,
      isExcluded?: null
    ): ExcludedFromReflectionEventFilter;
    ExcludedFromReflection(
      account?: null,
      isExcluded?: null
    ): ExcludedFromReflectionEventFilter;

    "SetPaused(uint256)"(timestamp?: null): SetPausedEventFilter;
    SetPaused(timestamp?: null): SetPausedEventFilter;

    "SetUnpaused(uint256)"(timestamp?: null): SetUnpausedEventFilter;
    SetUnpaused(timestamp?: null): SetUnpausedEventFilter;
  };

  estimateGas: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    bulkTransfer(
      recipients: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    communityPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    communityUnPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeRewards(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerDarwinSwapPair(
      _pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDarwinStaking(
      _darwinStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDarwinSwapFactory(
      _darwinSwapFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaintenance(
      _addr: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMasterChef(
      _masterChef: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinter(
      user_: PromiseOrValue<string>,
      canMint_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReceiveRewards(
      account: PromiseOrValue<string>,
      shouldReceive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSecurity(
      _addr: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUpgrader(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakedDarwin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bulkTransfer(
      recipients: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    communityPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    communityUnPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeRewards(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerDarwinSwapPair(
      _pair: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDarwinStaking(
      _darwinStaking: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDarwinSwapFactory(
      _darwinSwapFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaintenance(
      _addr: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMasterChef(
      _masterChef: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinter(
      user_: PromiseOrValue<string>,
      canMint_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReceiveRewards(
      account: PromiseOrValue<string>,
      shouldReceive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSecurity(
      _addr: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUpgrader(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakedDarwin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
