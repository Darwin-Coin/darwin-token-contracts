/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DarwinPrivateSaleInterface extends utils.Interface {
  functions: {
    "DARWIN_PER_BNB()": FunctionFragment;
    "HARDCAP()": FunctionFragment;
    "PERC()": FunctionFragment;
    "RAISE_MAX()": FunctionFragment;
    "RAISE_MIN()": FunctionFragment;
    "baseTokensLeftToRaiseOnCurrentStage()": FunctionFragment;
    "darwin()": FunctionFragment;
    "endSale()": FunctionFragment;
    "init(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "presaleStart()": FunctionFragment;
    "presaleStatus()": FunctionFragment;
    "privateSaleEnded()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setWallet1(address)": FunctionFragment;
    "status()": FunctionFragment;
    "tokensDepositedAndOwned(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userDeposit()": FunctionFragment;
    "userDeposits(address)": FunctionFragment;
    "vester()": FunctionFragment;
    "wallet1()": FunctionFragment;
    "withdrawUnsoldDarwinAndRaisedBNB()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DARWIN_PER_BNB"
      | "HARDCAP"
      | "PERC"
      | "RAISE_MAX"
      | "RAISE_MIN"
      | "baseTokensLeftToRaiseOnCurrentStage"
      | "darwin"
      | "endSale"
      | "init"
      | "owner"
      | "presaleStart"
      | "presaleStatus"
      | "privateSaleEnded"
      | "renounceOwnership"
      | "setWallet1"
      | "status"
      | "tokensDepositedAndOwned"
      | "transferOwnership"
      | "userDeposit"
      | "userDeposits"
      | "vester"
      | "wallet1"
      | "withdrawUnsoldDarwinAndRaisedBNB"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DARWIN_PER_BNB",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "HARDCAP", values?: undefined): string;
  encodeFunctionData(functionFragment: "PERC", values?: undefined): string;
  encodeFunctionData(functionFragment: "RAISE_MAX", values?: undefined): string;
  encodeFunctionData(functionFragment: "RAISE_MIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseTokensLeftToRaiseOnCurrentStage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "darwin", values?: undefined): string;
  encodeFunctionData(functionFragment: "endSale", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "presaleStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "privateSaleEnded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWallet1",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensDepositedAndOwned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposits",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vester", values?: undefined): string;
  encodeFunctionData(functionFragment: "wallet1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawUnsoldDarwinAndRaisedBNB",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DARWIN_PER_BNB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "HARDCAP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PERC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RAISE_MAX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RAISE_MIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokensLeftToRaiseOnCurrentStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "darwin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateSaleEnded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWallet1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensDepositedAndOwned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vester", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wallet1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUnsoldDarwinAndRaisedBNB",
    data: BytesLike
  ): Result;

  events: {
    "LpProvided(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PresaleEndDateSet(uint256)": EventFragment;
    "RouterSet(address)": EventFragment;
    "UserDeposit(address,uint256,uint256)": EventFragment;
    "Wallet1Set(address)": EventFragment;
    "Wallet2Set(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LpProvided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PresaleEndDateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Wallet1Set"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Wallet2Set"): EventFragment;
}

export interface LpProvidedEventObject {
  lpAmount: BigNumber;
  remainingAmount: BigNumber;
}
export type LpProvidedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LpProvidedEventObject
>;

export type LpProvidedEventFilter = TypedEventFilter<LpProvidedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PresaleEndDateSetEventObject {
  endDate: BigNumber;
}
export type PresaleEndDateSetEvent = TypedEvent<
  [BigNumber],
  PresaleEndDateSetEventObject
>;

export type PresaleEndDateSetEventFilter =
  TypedEventFilter<PresaleEndDateSetEvent>;

export interface RouterSetEventObject {
  router: string;
}
export type RouterSetEvent = TypedEvent<[string], RouterSetEventObject>;

export type RouterSetEventFilter = TypedEventFilter<RouterSetEvent>;

export interface UserDepositEventObject {
  user: string;
  amountIn: BigNumber;
  darwinAmount: BigNumber;
}
export type UserDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  UserDepositEventObject
>;

export type UserDepositEventFilter = TypedEventFilter<UserDepositEvent>;

export interface Wallet1SetEventObject {
  wallet1: string;
}
export type Wallet1SetEvent = TypedEvent<[string], Wallet1SetEventObject>;

export type Wallet1SetEventFilter = TypedEventFilter<Wallet1SetEvent>;

export interface Wallet2SetEventObject {
  wallet2: string;
}
export type Wallet2SetEvent = TypedEvent<[string], Wallet2SetEventObject>;

export type Wallet2SetEventFilter = TypedEventFilter<Wallet2SetEvent>;

export interface DarwinPrivateSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DarwinPrivateSaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DARWIN_PER_BNB(overrides?: CallOverrides): Promise<[BigNumber]>;

    HARDCAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERC(overrides?: CallOverrides): Promise<[BigNumber]>;

    RAISE_MAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    RAISE_MIN(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseTokensLeftToRaiseOnCurrentStage(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { tokensLeft: BigNumber }>;

    darwin(overrides?: CallOverrides): Promise<[string]>;

    endSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    init(
      _darwin: PromiseOrValue<string>,
      _vester: PromiseOrValue<string>,
      _presaleStart: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    presaleStart(overrides?: CallOverrides): Promise<[BigNumber]>;

    presaleStatus(overrides?: CallOverrides): Promise<[number]>;

    privateSaleEnded(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWallet1(
      _wallet1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    status(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        raisedAmount: BigNumber;
        soldAmount: BigNumber;
        numBuyers: BigNumber;
      }
    >;

    tokensDepositedAndOwned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userDeposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userDeposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vester(overrides?: CallOverrides): Promise<[string]>;

    wallet1(overrides?: CallOverrides): Promise<[string]>;

    withdrawUnsoldDarwinAndRaisedBNB(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DARWIN_PER_BNB(overrides?: CallOverrides): Promise<BigNumber>;

  HARDCAP(overrides?: CallOverrides): Promise<BigNumber>;

  PERC(overrides?: CallOverrides): Promise<BigNumber>;

  RAISE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

  RAISE_MIN(overrides?: CallOverrides): Promise<BigNumber>;

  baseTokensLeftToRaiseOnCurrentStage(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  darwin(overrides?: CallOverrides): Promise<string>;

  endSale(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  init(
    _darwin: PromiseOrValue<string>,
    _vester: PromiseOrValue<string>,
    _presaleStart: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  presaleStart(overrides?: CallOverrides): Promise<BigNumber>;

  presaleStatus(overrides?: CallOverrides): Promise<number>;

  privateSaleEnded(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWallet1(
    _wallet1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  status(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      raisedAmount: BigNumber;
      soldAmount: BigNumber;
      numBuyers: BigNumber;
    }
  >;

  tokensDepositedAndOwned(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userDeposit(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userDeposits(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vester(overrides?: CallOverrides): Promise<string>;

  wallet1(overrides?: CallOverrides): Promise<string>;

  withdrawUnsoldDarwinAndRaisedBNB(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DARWIN_PER_BNB(overrides?: CallOverrides): Promise<BigNumber>;

    HARDCAP(overrides?: CallOverrides): Promise<BigNumber>;

    PERC(overrides?: CallOverrides): Promise<BigNumber>;

    RAISE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    RAISE_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    baseTokensLeftToRaiseOnCurrentStage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    darwin(overrides?: CallOverrides): Promise<string>;

    endSale(overrides?: CallOverrides): Promise<void>;

    init(
      _darwin: PromiseOrValue<string>,
      _vester: PromiseOrValue<string>,
      _presaleStart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    presaleStart(overrides?: CallOverrides): Promise<BigNumber>;

    presaleStatus(overrides?: CallOverrides): Promise<number>;

    privateSaleEnded(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setWallet1(
      _wallet1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    status(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        raisedAmount: BigNumber;
        soldAmount: BigNumber;
        numBuyers: BigNumber;
      }
    >;

    tokensDepositedAndOwned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userDeposit(overrides?: CallOverrides): Promise<void>;

    userDeposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vester(overrides?: CallOverrides): Promise<string>;

    wallet1(overrides?: CallOverrides): Promise<string>;

    withdrawUnsoldDarwinAndRaisedBNB(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "LpProvided(uint256,uint256)"(
      lpAmount?: PromiseOrValue<BigNumberish> | null,
      remainingAmount?: PromiseOrValue<BigNumberish> | null
    ): LpProvidedEventFilter;
    LpProvided(
      lpAmount?: PromiseOrValue<BigNumberish> | null,
      remainingAmount?: PromiseOrValue<BigNumberish> | null
    ): LpProvidedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PresaleEndDateSet(uint256)"(
      endDate?: PromiseOrValue<BigNumberish> | null
    ): PresaleEndDateSetEventFilter;
    PresaleEndDateSet(
      endDate?: PromiseOrValue<BigNumberish> | null
    ): PresaleEndDateSetEventFilter;

    "RouterSet(address)"(
      router?: PromiseOrValue<string> | null
    ): RouterSetEventFilter;
    RouterSet(router?: PromiseOrValue<string> | null): RouterSetEventFilter;

    "UserDeposit(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountIn?: PromiseOrValue<BigNumberish> | null,
      darwinAmount?: PromiseOrValue<BigNumberish> | null
    ): UserDepositEventFilter;
    UserDeposit(
      user?: PromiseOrValue<string> | null,
      amountIn?: PromiseOrValue<BigNumberish> | null,
      darwinAmount?: PromiseOrValue<BigNumberish> | null
    ): UserDepositEventFilter;

    "Wallet1Set(address)"(
      wallet1?: PromiseOrValue<string> | null
    ): Wallet1SetEventFilter;
    Wallet1Set(wallet1?: PromiseOrValue<string> | null): Wallet1SetEventFilter;

    "Wallet2Set(address)"(
      wallet2?: PromiseOrValue<string> | null
    ): Wallet2SetEventFilter;
    Wallet2Set(wallet2?: PromiseOrValue<string> | null): Wallet2SetEventFilter;
  };

  estimateGas: {
    DARWIN_PER_BNB(overrides?: CallOverrides): Promise<BigNumber>;

    HARDCAP(overrides?: CallOverrides): Promise<BigNumber>;

    PERC(overrides?: CallOverrides): Promise<BigNumber>;

    RAISE_MAX(overrides?: CallOverrides): Promise<BigNumber>;

    RAISE_MIN(overrides?: CallOverrides): Promise<BigNumber>;

    baseTokensLeftToRaiseOnCurrentStage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    darwin(overrides?: CallOverrides): Promise<BigNumber>;

    endSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    init(
      _darwin: PromiseOrValue<string>,
      _vester: PromiseOrValue<string>,
      _presaleStart: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    presaleStart(overrides?: CallOverrides): Promise<BigNumber>;

    presaleStatus(overrides?: CallOverrides): Promise<BigNumber>;

    privateSaleEnded(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWallet1(
      _wallet1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    tokensDepositedAndOwned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userDeposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userDeposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vester(overrides?: CallOverrides): Promise<BigNumber>;

    wallet1(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawUnsoldDarwinAndRaisedBNB(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DARWIN_PER_BNB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    HARDCAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RAISE_MAX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RAISE_MIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseTokensLeftToRaiseOnCurrentStage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    darwin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endSale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _darwin: PromiseOrValue<string>,
      _vester: PromiseOrValue<string>,
      _presaleStart: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    privateSaleEnded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWallet1(
      _wallet1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensDepositedAndOwned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userDeposit(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userDeposits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vester(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wallet1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawUnsoldDarwinAndRaisedBNB(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
