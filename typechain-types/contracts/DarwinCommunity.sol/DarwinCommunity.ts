/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IDarwinCommunity {
  export type CommunityFundCandidateStruct = {
    id: PromiseOrValue<BigNumberish>;
    valueAddress: PromiseOrValue<string>;
    isActive: PromiseOrValue<boolean>;
  };

  export type CommunityFundCandidateStructOutput = [
    BigNumber,
    string,
    boolean
  ] & { id: BigNumber; valueAddress: string; isActive: boolean };

  export type ProposalStruct = {
    id: PromiseOrValue<BigNumberish>;
    proposer: PromiseOrValue<string>;
    targets: PromiseOrValue<string>[];
    values: PromiseOrValue<BigNumberish>[];
    signatures: PromiseOrValue<string>[];
    calldatas: PromiseOrValue<BytesLike>[];
    darwinAmount: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    forVotes: PromiseOrValue<BigNumberish>;
    againstVotes: PromiseOrValue<BigNumberish>;
    canceled: PromiseOrValue<boolean>;
    executed: PromiseOrValue<boolean>;
  };

  export type ProposalStructOutput = [
    BigNumber,
    string,
    string[],
    BigNumber[],
    string[],
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    id: BigNumber;
    proposer: string;
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: string[];
    darwinAmount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    canceled: boolean;
    executed: boolean;
  };

  export type ReceiptStruct = {
    hasVoted: PromiseOrValue<boolean>;
    inSupport: PromiseOrValue<boolean>;
    darwinAmount: PromiseOrValue<BigNumberish>;
  };

  export type ReceiptStructOutput = [boolean, boolean, BigNumber] & {
    hasVoted: boolean;
    inSupport: boolean;
    darwinAmount: BigNumber;
  };

  export type LockInfoStruct = {
    darwinAmount: PromiseOrValue<BigNumberish>;
    lockEnd: PromiseOrValue<BigNumberish>;
  };

  export type LockInfoStructOutput = [BigNumber, BigNumber] & {
    darwinAmount: BigNumber;
    lockEnd: BigNumber;
  };
}

export interface DarwinCommunityInterface extends utils.Interface {
  functions: {
    "ADMIN()": FunctionFragment;
    "CALLS_TO_EXECUTE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OWNER()": FunctionFragment;
    "PROPOSER()": FunctionFragment;
    "SENIOR_PROPOSER()": FunctionFragment;
    "VOTE_LOCK_PERIOD()": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "castVote(uint256,bool,uint256)": FunctionFragment;
    "darwin()": FunctionFragment;
    "deactivateFundCandidate(uint256)": FunctionFragment;
    "distributeCommunityFund(uint256,uint256[],uint256[],uint256,uint256)": FunctionFragment;
    "emitInitialFundsEvents()": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "freedStakedDarwin(address)": FunctionFragment;
    "getActiveFundCandidates()": FunctionFragment;
    "getActiveFundDandidateIds()": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getVoteReceipt(uint256)": FunctionFragment;
    "gracePeriod()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "init(address,address[],string[],string[])": FunctionFragment;
    "isProposalSignatureRestricted(string)": FunctionFragment;
    "lastCommunityFundCandidateId()": FunctionFragment;
    "lastProposalId()": FunctionFragment;
    "lockedStakedDarwin(uint256,address)": FunctionFragment;
    "maxVotingPeriod()": FunctionFragment;
    "minDarwinTransferToAccess()": FunctionFragment;
    "minVotingDelay()": FunctionFragment;
    "minVotingPeriod()": FunctionFragment;
    "newFundCandidate(address,string)": FunctionFragment;
    "proposalMaxOperations()": FunctionFragment;
    "proposalMinVotesCountForAction()": FunctionFragment;
    "propose(address[],uint256[],string[],bytes[],string,string,string,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "setDarwinAddress(address)": FunctionFragment;
    "setGracePeriod(uint256)": FunctionFragment;
    "setMaxVotingPeriod(uint256)": FunctionFragment;
    "setMinVotingDelay(uint256)": FunctionFragment;
    "setMinVotingPeriod(uint256)": FunctionFragment;
    "setOwner(address,bool)": FunctionFragment;
    "setProposalMaxOperations(uint256)": FunctionFragment;
    "setProposalMinVotesCountForAction(uint256)": FunctionFragment;
    "setProposer(address,bool)": FunctionFragment;
    "setSeniorProposer(address,bool)": FunctionFragment;
    "stakedDarwin()": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "withdrawStakedDarwin()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN"
      | "CALLS_TO_EXECUTE"
      | "DEFAULT_ADMIN_ROLE"
      | "OWNER"
      | "PROPOSER"
      | "SENIOR_PROPOSER"
      | "VOTE_LOCK_PERIOD"
      | "cancel"
      | "castVote"
      | "darwin"
      | "deactivateFundCandidate"
      | "distributeCommunityFund"
      | "emitInitialFundsEvents"
      | "execute"
      | "freedStakedDarwin"
      | "getActiveFundCandidates"
      | "getActiveFundDandidateIds"
      | "getProposal"
      | "getRoleAdmin"
      | "getVoteReceipt"
      | "gracePeriod"
      | "grantRole"
      | "hasRole"
      | "init"
      | "isProposalSignatureRestricted"
      | "lastCommunityFundCandidateId"
      | "lastProposalId"
      | "lockedStakedDarwin"
      | "maxVotingPeriod"
      | "minDarwinTransferToAccess"
      | "minVotingDelay"
      | "minVotingPeriod"
      | "newFundCandidate"
      | "proposalMaxOperations"
      | "proposalMinVotesCountForAction"
      | "propose"
      | "renounceRole"
      | "revokeRole"
      | "setAdmin"
      | "setDarwinAddress"
      | "setGracePeriod"
      | "setMaxVotingPeriod"
      | "setMinVotingDelay"
      | "setMinVotingPeriod"
      | "setOwner"
      | "setProposalMaxOperations"
      | "setProposalMinVotesCountForAction"
      | "setProposer"
      | "setSeniorProposer"
      | "stakedDarwin"
      | "state"
      | "supportsInterface"
      | "withdrawStakedDarwin"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CALLS_TO_EXECUTE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(functionFragment: "PROPOSER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SENIOR_PROPOSER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_LOCK_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "darwin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deactivateFundCandidate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeCommunityFund",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitInitialFundsEvents",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "freedStakedDarwin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveFundCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveFundDandidateIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteReceipt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalSignatureRestricted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastCommunityFundCandidateId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedStakedDarwin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxVotingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDarwinTransferToAccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minVotingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minVotingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newFundCandidate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMinVotesCountForAction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDarwinAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGracePeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxVotingPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinVotingDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinVotingPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalMaxOperations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalMinVotesCountForAction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProposer",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSeniorProposer",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedDarwin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "state",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStakedDarwin",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CALLS_TO_EXECUTE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PROPOSER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SENIOR_PROPOSER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_LOCK_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "darwin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateFundCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeCommunityFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitInitialFundsEvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freedStakedDarwin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveFundCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveFundDandidateIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isProposalSignatureRestricted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCommunityFundCandidateId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedStakedDarwin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDarwinTransferToAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVotingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newFundCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMinVotesCountForAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDarwinAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinVotingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalMinVotesCountForAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSeniorProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedDarwin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStakedDarwin",
    data: BytesLike
  ): Result;

  events: {
    "ActiveFundCandidateAdded(uint256)": EventFragment;
    "ActiveFundCandidateRemoved(uint256)": EventFragment;
    "CommunityFundDistributed(uint256,uint256[],uint256[])": EventFragment;
    "ExecuteTransaction(uint256,bytes32,address,uint256,string,bytes)": EventFragment;
    "FundCandidateDeactivated(uint256)": EventFragment;
    "NewFundCandidate(uint256,address,string)": EventFragment;
    "ProposalCanceled(uint256)": EventFragment;
    "ProposalCreated(uint256,address,uint256,uint256,string,string,string)": EventFragment;
    "ProposalExecuted(uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "VoteCast(address,uint256,bool)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActiveFundCandidateAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActiveFundCandidateRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommunityFundDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundCandidateDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFundCandidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ActiveFundCandidateAddedEventObject {
  id: BigNumber;
}
export type ActiveFundCandidateAddedEvent = TypedEvent<
  [BigNumber],
  ActiveFundCandidateAddedEventObject
>;

export type ActiveFundCandidateAddedEventFilter =
  TypedEventFilter<ActiveFundCandidateAddedEvent>;

export interface ActiveFundCandidateRemovedEventObject {
  id: BigNumber;
}
export type ActiveFundCandidateRemovedEvent = TypedEvent<
  [BigNumber],
  ActiveFundCandidateRemovedEventObject
>;

export type ActiveFundCandidateRemovedEventFilter =
  TypedEventFilter<ActiveFundCandidateRemovedEvent>;

export interface CommunityFundDistributedEventObject {
  fundWeek: BigNumber;
  candidates: BigNumber[];
  tokens: BigNumber[];
}
export type CommunityFundDistributedEvent = TypedEvent<
  [BigNumber, BigNumber[], BigNumber[]],
  CommunityFundDistributedEventObject
>;

export type CommunityFundDistributedEventFilter =
  TypedEventFilter<CommunityFundDistributedEvent>;

export interface ExecuteTransactionEventObject {
  id: BigNumber;
  txHash: string;
  target: string;
  value: BigNumber;
  signature: string;
  data: string;
}
export type ExecuteTransactionEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string, string],
  ExecuteTransactionEventObject
>;

export type ExecuteTransactionEventFilter =
  TypedEventFilter<ExecuteTransactionEvent>;

export interface FundCandidateDeactivatedEventObject {
  id: BigNumber;
}
export type FundCandidateDeactivatedEvent = TypedEvent<
  [BigNumber],
  FundCandidateDeactivatedEventObject
>;

export type FundCandidateDeactivatedEventFilter =
  TypedEventFilter<FundCandidateDeactivatedEvent>;

export interface NewFundCandidateEventObject {
  id: BigNumber;
  valueAddress: string;
  proposal: string;
}
export type NewFundCandidateEvent = TypedEvent<
  [BigNumber, string, string],
  NewFundCandidateEventObject
>;

export type NewFundCandidateEventFilter =
  TypedEventFilter<NewFundCandidateEvent>;

export interface ProposalCanceledEventObject {
  id: BigNumber;
}
export type ProposalCanceledEvent = TypedEvent<
  [BigNumber],
  ProposalCanceledEventObject
>;

export type ProposalCanceledEventFilter =
  TypedEventFilter<ProposalCanceledEvent>;

export interface ProposalCreatedEventObject {
  id: BigNumber;
  proposer: string;
  startTime: BigNumber;
  endTime: BigNumber;
  title: string;
  description: string;
  other: string;
}
export type ProposalCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string, string, string],
  ProposalCreatedEventObject
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface ProposalExecutedEventObject {
  id: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface VoteCastEventObject {
  voter: string;
  proposalId: BigNumber;
  inSupport: boolean;
}
export type VoteCastEvent = TypedEvent<
  [string, BigNumber, boolean],
  VoteCastEventObject
>;

export type VoteCastEventFilter = TypedEventFilter<VoteCastEvent>;

export interface WithdrawEventObject {
  user: string;
  darwinAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface DarwinCommunity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DarwinCommunityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN(overrides?: CallOverrides): Promise<[string]>;

    CALLS_TO_EXECUTE(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OWNER(overrides?: CallOverrides): Promise<[string]>;

    PROPOSER(overrides?: CallOverrides): Promise<[string]>;

    SENIOR_PROPOSER(overrides?: CallOverrides): Promise<[string]>;

    VOTE_LOCK_PERIOD(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancel(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    castVote(
      proposalId: PromiseOrValue<BigNumberish>,
      inSupport: PromiseOrValue<boolean>,
      darwinAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    darwin(overrides?: CallOverrides): Promise<[string]>;

    deactivateFundCandidate(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeCommunityFund(
      fundWeek: PromiseOrValue<BigNumberish>,
      candidates: PromiseOrValue<BigNumberish>[],
      votes: PromiseOrValue<BigNumberish>[],
      totalVoteCount: PromiseOrValue<BigNumberish>,
      tokensToDistribute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitInitialFundsEvents(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execute(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freedStakedDarwin(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { total: BigNumber }>;

    getActiveFundCandidates(
      overrides?: CallOverrides
    ): Promise<[IDarwinCommunity.CommunityFundCandidateStructOutput[]]>;

    getActiveFundDandidateIds(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getProposal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IDarwinCommunity.ProposalStructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVoteReceipt(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IDarwinCommunity.ReceiptStructOutput]>;

    gracePeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      _role: PromiseOrValue<BytesLike>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    init(
      _darwin: PromiseOrValue<string>,
      fundAddress: PromiseOrValue<string>[],
      initialFundProposalStrings: PromiseOrValue<string>[],
      restrictedProposalSignatures: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isProposalSignatureRestricted(
      signature: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastCommunityFundCandidateId(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastProposalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedStakedDarwin(
      proposalId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IDarwinCommunity.LockInfoStructOutput]>;

    maxVotingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDarwinTransferToAccess(overrides?: CallOverrides): Promise<[BigNumber]>;

    minVotingDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    minVotingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    newFundCandidate(
      valueAddress: PromiseOrValue<string>,
      proposal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalMinVotesCountForAction(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    propose(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      signatures: PromiseOrValue<string>[],
      calldatas: PromiseOrValue<BytesLike>[],
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      other: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDarwinAddress(
      _darwin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGracePeriod(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxVotingPeriod(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinVotingDelay(
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinVotingPeriod(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProposalMaxOperations(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProposalMinVotesCountForAction(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProposer(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSeniorProposer(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakedDarwin(overrides?: CallOverrides): Promise<[string]>;

    state(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdrawStakedDarwin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN(overrides?: CallOverrides): Promise<string>;

  CALLS_TO_EXECUTE(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OWNER(overrides?: CallOverrides): Promise<string>;

  PROPOSER(overrides?: CallOverrides): Promise<string>;

  SENIOR_PROPOSER(overrides?: CallOverrides): Promise<string>;

  VOTE_LOCK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  cancel(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  castVote(
    proposalId: PromiseOrValue<BigNumberish>,
    inSupport: PromiseOrValue<boolean>,
    darwinAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  darwin(overrides?: CallOverrides): Promise<string>;

  deactivateFundCandidate(
    _id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeCommunityFund(
    fundWeek: PromiseOrValue<BigNumberish>,
    candidates: PromiseOrValue<BigNumberish>[],
    votes: PromiseOrValue<BigNumberish>[],
    totalVoteCount: PromiseOrValue<BigNumberish>,
    tokensToDistribute: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitInitialFundsEvents(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execute(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freedStakedDarwin(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActiveFundCandidates(
    overrides?: CallOverrides
  ): Promise<IDarwinCommunity.CommunityFundCandidateStructOutput[]>;

  getActiveFundDandidateIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getProposal(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IDarwinCommunity.ProposalStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoteReceipt(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IDarwinCommunity.ReceiptStructOutput>;

  gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    _role: PromiseOrValue<BytesLike>,
    _addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  init(
    _darwin: PromiseOrValue<string>,
    fundAddress: PromiseOrValue<string>[],
    initialFundProposalStrings: PromiseOrValue<string>[],
    restrictedProposalSignatures: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isProposalSignatureRestricted(
    signature: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastCommunityFundCandidateId(overrides?: CallOverrides): Promise<BigNumber>;

  lastProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  lockedStakedDarwin(
    proposalId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IDarwinCommunity.LockInfoStructOutput>;

  maxVotingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  minDarwinTransferToAccess(overrides?: CallOverrides): Promise<BigNumber>;

  minVotingDelay(overrides?: CallOverrides): Promise<BigNumber>;

  minVotingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  newFundCandidate(
    valueAddress: PromiseOrValue<string>,
    proposal: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

  proposalMinVotesCountForAction(overrides?: CallOverrides): Promise<BigNumber>;

  propose(
    targets: PromiseOrValue<string>[],
    values: PromiseOrValue<BigNumberish>[],
    signatures: PromiseOrValue<string>[],
    calldatas: PromiseOrValue<BytesLike>[],
    title: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    other: PromiseOrValue<string>,
    endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _account: PromiseOrValue<string>,
    _hasRole: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDarwinAddress(
    _darwin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGracePeriod(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxVotingPeriod(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinVotingDelay(
    delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinVotingPeriod(
    value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _account: PromiseOrValue<string>,
    _hasRole: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProposalMaxOperations(
    count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProposalMinVotesCountForAction(
    count: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProposer(
    _account: PromiseOrValue<string>,
    _hasRole: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSeniorProposer(
    _account: PromiseOrValue<string>,
    _hasRole: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakedDarwin(overrides?: CallOverrides): Promise<string>;

  state(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdrawStakedDarwin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN(overrides?: CallOverrides): Promise<string>;

    CALLS_TO_EXECUTE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OWNER(overrides?: CallOverrides): Promise<string>;

    PROPOSER(overrides?: CallOverrides): Promise<string>;

    SENIOR_PROPOSER(overrides?: CallOverrides): Promise<string>;

    VOTE_LOCK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    castVote(
      proposalId: PromiseOrValue<BigNumberish>,
      inSupport: PromiseOrValue<boolean>,
      darwinAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    darwin(overrides?: CallOverrides): Promise<string>;

    deactivateFundCandidate(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeCommunityFund(
      fundWeek: PromiseOrValue<BigNumberish>,
      candidates: PromiseOrValue<BigNumberish>[],
      votes: PromiseOrValue<BigNumberish>[],
      totalVoteCount: PromiseOrValue<BigNumberish>,
      tokensToDistribute: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitInitialFundsEvents(overrides?: CallOverrides): Promise<void>;

    execute(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    freedStakedDarwin(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveFundCandidates(
      overrides?: CallOverrides
    ): Promise<IDarwinCommunity.CommunityFundCandidateStructOutput[]>;

    getActiveFundDandidateIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getProposal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IDarwinCommunity.ProposalStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoteReceipt(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IDarwinCommunity.ReceiptStructOutput>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      _role: PromiseOrValue<BytesLike>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(
      _darwin: PromiseOrValue<string>,
      fundAddress: PromiseOrValue<string>[],
      initialFundProposalStrings: PromiseOrValue<string>[],
      restrictedProposalSignatures: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isProposalSignatureRestricted(
      signature: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastCommunityFundCandidateId(overrides?: CallOverrides): Promise<BigNumber>;

    lastProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    lockedStakedDarwin(
      proposalId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IDarwinCommunity.LockInfoStructOutput>;

    maxVotingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    minDarwinTransferToAccess(overrides?: CallOverrides): Promise<BigNumber>;

    minVotingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minVotingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    newFundCandidate(
      valueAddress: PromiseOrValue<string>,
      proposal: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMinVotesCountForAction(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      signatures: PromiseOrValue<string>[],
      calldatas: PromiseOrValue<BytesLike>[],
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      other: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDarwinAddress(
      _darwin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGracePeriod(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxVotingPeriod(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinVotingDelay(
      delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinVotingPeriod(
      value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposalMaxOperations(
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposalMinVotesCountForAction(
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposer(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSeniorProposer(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedDarwin(overrides?: CallOverrides): Promise<string>;

    state(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawStakedDarwin(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ActiveFundCandidateAdded(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ActiveFundCandidateAddedEventFilter;
    ActiveFundCandidateAdded(
      id?: PromiseOrValue<BigNumberish> | null
    ): ActiveFundCandidateAddedEventFilter;

    "ActiveFundCandidateRemoved(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ActiveFundCandidateRemovedEventFilter;
    ActiveFundCandidateRemoved(
      id?: PromiseOrValue<BigNumberish> | null
    ): ActiveFundCandidateRemovedEventFilter;

    "CommunityFundDistributed(uint256,uint256[],uint256[])"(
      fundWeek?: null,
      candidates?: null,
      tokens?: null
    ): CommunityFundDistributedEventFilter;
    CommunityFundDistributed(
      fundWeek?: null,
      candidates?: null,
      tokens?: null
    ): CommunityFundDistributedEventFilter;

    "ExecuteTransaction(uint256,bytes32,address,uint256,string,bytes)"(
      id?: PromiseOrValue<BigNumberish> | null,
      txHash?: PromiseOrValue<BytesLike> | null,
      target?: PromiseOrValue<string> | null,
      value?: null,
      signature?: null,
      data?: null
    ): ExecuteTransactionEventFilter;
    ExecuteTransaction(
      id?: PromiseOrValue<BigNumberish> | null,
      txHash?: PromiseOrValue<BytesLike> | null,
      target?: PromiseOrValue<string> | null,
      value?: null,
      signature?: null,
      data?: null
    ): ExecuteTransactionEventFilter;

    "FundCandidateDeactivated(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): FundCandidateDeactivatedEventFilter;
    FundCandidateDeactivated(
      id?: PromiseOrValue<BigNumberish> | null
    ): FundCandidateDeactivatedEventFilter;

    "NewFundCandidate(uint256,address,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      valueAddress?: null,
      proposal?: null
    ): NewFundCandidateEventFilter;
    NewFundCandidate(
      id?: PromiseOrValue<BigNumberish> | null,
      valueAddress?: null,
      proposal?: null
    ): NewFundCandidateEventFilter;

    "ProposalCanceled(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalCanceledEventFilter;
    ProposalCanceled(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalCanceledEventFilter;

    "ProposalCreated(uint256,address,uint256,uint256,string,string,string)"(
      id?: PromiseOrValue<BigNumberish> | null,
      proposer?: PromiseOrValue<string> | null,
      startTime?: null,
      endTime?: null,
      title?: null,
      description?: null,
      other?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      proposer?: PromiseOrValue<string> | null,
      startTime?: null,
      endTime?: null,
      title?: null,
      description?: null,
      other?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecuted(uint256)"(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      id?: PromiseOrValue<BigNumberish> | null
    ): ProposalExecutedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "VoteCast(address,uint256,bool)"(
      voter?: PromiseOrValue<string> | null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      inSupport?: null
    ): VoteCastEventFilter;
    VoteCast(
      voter?: PromiseOrValue<string> | null,
      proposalId?: PromiseOrValue<BigNumberish> | null,
      inSupport?: null
    ): VoteCastEventFilter;

    "Withdraw(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      darwinAmount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      darwinAmount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    CALLS_TO_EXECUTE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    PROPOSER(overrides?: CallOverrides): Promise<BigNumber>;

    SENIOR_PROPOSER(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_LOCK_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    castVote(
      proposalId: PromiseOrValue<BigNumberish>,
      inSupport: PromiseOrValue<boolean>,
      darwinAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    darwin(overrides?: CallOverrides): Promise<BigNumber>;

    deactivateFundCandidate(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeCommunityFund(
      fundWeek: PromiseOrValue<BigNumberish>,
      candidates: PromiseOrValue<BigNumberish>[],
      votes: PromiseOrValue<BigNumberish>[],
      totalVoteCount: PromiseOrValue<BigNumberish>,
      tokensToDistribute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitInitialFundsEvents(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execute(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freedStakedDarwin(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveFundCandidates(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveFundDandidateIds(overrides?: CallOverrides): Promise<BigNumber>;

    getProposal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteReceipt(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      _role: PromiseOrValue<BytesLike>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _darwin: PromiseOrValue<string>,
      fundAddress: PromiseOrValue<string>[],
      initialFundProposalStrings: PromiseOrValue<string>[],
      restrictedProposalSignatures: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isProposalSignatureRestricted(
      signature: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastCommunityFundCandidateId(overrides?: CallOverrides): Promise<BigNumber>;

    lastProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    lockedStakedDarwin(
      proposalId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxVotingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    minDarwinTransferToAccess(overrides?: CallOverrides): Promise<BigNumber>;

    minVotingDelay(overrides?: CallOverrides): Promise<BigNumber>;

    minVotingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    newFundCandidate(
      valueAddress: PromiseOrValue<string>,
      proposal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    proposalMinVotesCountForAction(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      signatures: PromiseOrValue<string>[],
      calldatas: PromiseOrValue<BytesLike>[],
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      other: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDarwinAddress(
      _darwin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGracePeriod(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxVotingPeriod(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinVotingDelay(
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinVotingPeriod(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProposalMaxOperations(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProposalMinVotesCountForAction(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProposer(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSeniorProposer(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakedDarwin(overrides?: CallOverrides): Promise<BigNumber>;

    state(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawStakedDarwin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CALLS_TO_EXECUTE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OWNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PROPOSER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SENIOR_PROPOSER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTE_LOCK_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    castVote(
      proposalId: PromiseOrValue<BigNumberish>,
      inSupport: PromiseOrValue<boolean>,
      darwinAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    darwin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deactivateFundCandidate(
      _id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeCommunityFund(
      fundWeek: PromiseOrValue<BigNumberish>,
      candidates: PromiseOrValue<BigNumberish>[],
      votes: PromiseOrValue<BigNumberish>[],
      totalVoteCount: PromiseOrValue<BigNumberish>,
      tokensToDistribute: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitInitialFundsEvents(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freedStakedDarwin(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveFundCandidates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveFundDandidateIds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteReceipt(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      _role: PromiseOrValue<BytesLike>,
      _addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _darwin: PromiseOrValue<string>,
      fundAddress: PromiseOrValue<string>[],
      initialFundProposalStrings: PromiseOrValue<string>[],
      restrictedProposalSignatures: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isProposalSignatureRestricted(
      signature: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastCommunityFundCandidateId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastProposalId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedStakedDarwin(
      proposalId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxVotingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDarwinTransferToAccess(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minVotingDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minVotingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newFundCandidate(
      valueAddress: PromiseOrValue<string>,
      proposal: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalMinVotesCountForAction(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      targets: PromiseOrValue<string>[],
      values: PromiseOrValue<BigNumberish>[],
      signatures: PromiseOrValue<string>[],
      calldatas: PromiseOrValue<BytesLike>[],
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      other: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDarwinAddress(
      _darwin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGracePeriod(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxVotingPeriod(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinVotingDelay(
      delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinVotingPeriod(
      value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProposalMaxOperations(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProposalMinVotesCountForAction(
      count: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProposer(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSeniorProposer(
      _account: PromiseOrValue<string>,
      _hasRole: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakedDarwin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawStakedDarwin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
