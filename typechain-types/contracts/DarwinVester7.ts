/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IDarwinVester {
  export type UserInfoStruct = {
    withdrawn: PromiseOrValue<BigNumberish>;
    vested: PromiseOrValue<BigNumberish>;
    vestTimestamp: PromiseOrValue<BigNumberish>;
    claimed: PromiseOrValue<BigNumberish>;
  };

  export type UserInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    withdrawn: BigNumber;
    vested: BigNumber;
    vestTimestamp: BigNumber;
    claimed: BigNumber;
  };
}

export interface DarwinVester7Interface extends utils.Interface {
  functions: {
    "INTEREST()": FunctionFragment;
    "MONTHS()": FunctionFragment;
    "VESTING_TIME()": FunctionFragment;
    "claimableDarwin(address)": FunctionFragment;
    "darwin()": FunctionFragment;
    "deployer()": FunctionFragment;
    "init(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawableDarwin(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INTEREST"
      | "MONTHS"
      | "VESTING_TIME"
      | "claimableDarwin"
      | "darwin"
      | "deployer"
      | "init"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "userInfo"
      | "withdraw"
      | "withdrawableDarwin"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "INTEREST", values?: undefined): string;
  encodeFunctionData(functionFragment: "MONTHS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VESTING_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableDarwin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "darwin", values?: undefined): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableDarwin",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "INTEREST", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MONTHS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VESTING_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableDarwin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "darwin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableDarwin",
    data: BytesLike
  ): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Vest(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ClaimEventObject {
  user: string;
  claimAmount: BigNumber;
}
export type ClaimEvent = TypedEvent<[string, BigNumber], ClaimEventObject>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VestEventObject {
  user: string;
  vestAmount: BigNumber;
}
export type VestEvent = TypedEvent<[string, BigNumber], VestEventObject>;

export type VestEventFilter = TypedEventFilter<VestEvent>;

export interface WithdrawEventObject {
  user: string;
  withdrawAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface DarwinVester7 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DarwinVester7Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INTEREST(overrides?: CallOverrides): Promise<[BigNumber]>;

    MONTHS(overrides?: CallOverrides): Promise<[BigNumber]>;

    VESTING_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimableDarwin(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { claimable: BigNumber }>;

    darwin(overrides?: CallOverrides): Promise<[string]>;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    init(
      _darwin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        withdrawn: BigNumber;
        vested: BigNumber;
        vestTimestamp: BigNumber;
        claimed: BigNumber;
      }
    >;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawableDarwin(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { withdrawable: BigNumber }>;
  };

  INTEREST(overrides?: CallOverrides): Promise<BigNumber>;

  MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

  VESTING_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  claimableDarwin(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  darwin(overrides?: CallOverrides): Promise<string>;

  deployer(overrides?: CallOverrides): Promise<string>;

  init(
    _darwin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      withdrawn: BigNumber;
      vested: BigNumber;
      vestTimestamp: BigNumber;
      claimed: BigNumber;
    }
  >;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawableDarwin(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    INTEREST(overrides?: CallOverrides): Promise<BigNumber>;

    MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    VESTING_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    claimableDarwin(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    darwin(overrides?: CallOverrides): Promise<string>;

    deployer(overrides?: CallOverrides): Promise<string>;

    init(
      _darwin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        withdrawn: BigNumber;
        vested: BigNumber;
        vestTimestamp: BigNumber;
        claimed: BigNumber;
      }
    >;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawableDarwin(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Claim(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      claimAmount?: PromiseOrValue<BigNumberish> | null
    ): ClaimEventFilter;
    Claim(
      user?: PromiseOrValue<string> | null,
      claimAmount?: PromiseOrValue<BigNumberish> | null
    ): ClaimEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Vest(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      vestAmount?: PromiseOrValue<BigNumberish> | null
    ): VestEventFilter;
    Vest(
      user?: PromiseOrValue<string> | null,
      vestAmount?: PromiseOrValue<BigNumberish> | null
    ): VestEventFilter;

    "Withdraw(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      withdrawAmount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      withdrawAmount?: PromiseOrValue<BigNumberish> | null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    INTEREST(overrides?: CallOverrides): Promise<BigNumber>;

    MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    VESTING_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    claimableDarwin(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    darwin(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _darwin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawableDarwin(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INTEREST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MONTHS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VESTING_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimableDarwin(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    darwin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      _darwin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawableDarwin(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
