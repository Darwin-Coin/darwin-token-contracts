/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  StakedDarwin,
  StakedDarwinInterface,
} from "../../contracts/StakedDarwin";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "darwin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "darwinStaking",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_darwinStaking",
        type: "address",
      },
    ],
    name: "setDarwinStaking",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50336080526080516106796100376000396000818161010a01526102cd01526106796000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806370a082311161006657806370a082311461017357806384789b521461019357806395d89b41146101a65780639db36ed2146101cc5780639dc29fac146101df57600080fd5b806306fdde03146100a357806318160ddd146100ee5780633110c79214610105578063313ce5671461014457806340c10f191461015e575b600080fd5b6100d86040518060400160405280601681526020017514dd185ad9590811185c9dda5b88141c9bdd1bd8dbdb60521b81525081565b6040516100e59190610541565b60405180910390f35b6100f760015481565b6040519081526020016100e5565b61012c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100e5565b61014c601281565b60405160ff90911681526020016100e5565b61017161016c3660046105b2565b6101f2565b005b6100f76101813660046105dc565b60026020526000908152604090205481565b60005461012c906001600160a01b031681565b6100d86040518060400160405280600781526020016639a220a92ba4a760c91b81525081565b6101716101da3660046105dc565b61025f565b6101716101ed3660046105b2565b61035c565b6000546001600160a01b031633146102515760405162461bcd60e51b815260206004820181905260248201527f5374616b656444617277696e3a2043414c4c45525f4e4f545f5354414b494e4760448201526064015b60405180910390fd5b61025b82826103c0565b5050565b6000546001600160a01b0316156102c25760405162461bcd60e51b815260206004820152602160248201527f5374616b656444617277696e3a205354414b494e475f414c52454144595f53456044820152601560fa1b6064820152608401610248565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461033a5760405162461bcd60e51b815260206004820152601f60248201527f5374616b656444617277696e3a2043414c4c45525f4e4f545f44415257494e006044820152606401610248565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103b65760405162461bcd60e51b815260206004820181905260248201527f5374616b656444617277696e3a2043414c4c45525f4e4f545f5354414b494e476044820152606401610248565b61025b828261044a565b80600160008282546103d29190610614565b90915550506001600160a01b038216600090815260026020526040812080548392906103ff908490610614565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6001600160a01b0382166000908152600260205260409020548111156104bd5760405162461bcd60e51b815260206004820152602260248201527f5374616b656444617277696e3a204255524e5f455843454544535f42414c414e604482015261434560f01b6064820152608401610248565b6001600160a01b038216600090815260026020526040812080548392906104e590849061062c565b9250508190555080600160008282546104fe919061062c565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161043e565b600060208083528351808285015260005b8181101561056e57858101830151858201604001528201610552565b81811115610580576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146105ad57600080fd5b919050565b600080604083850312156105c557600080fd5b6105ce83610596565b946020939093013593505050565b6000602082840312156105ee57600080fd5b6105f782610596565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610627576106276105fe565b500190565b60008282101561063e5761063e6105fe565b50039056fea2646970667358221220a0b3a439829f9b51e30d1926dac7413ef7d0fd190d15b36c45591f334ebc830a64736f6c634300080e0033";

type StakedDarwinConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakedDarwinConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakedDarwin__factory extends ContractFactory {
  constructor(...args: StakedDarwinConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StakedDarwin> {
    return super.deploy(overrides || {}) as Promise<StakedDarwin>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StakedDarwin {
    return super.attach(address) as StakedDarwin;
  }
  override connect(signer: Signer): StakedDarwin__factory {
    return super.connect(signer) as StakedDarwin__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakedDarwinInterface {
    return new utils.Interface(_abi) as StakedDarwinInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakedDarwin {
    return new Contract(address, _abi, signerOrProvider) as StakedDarwin;
  }
}
