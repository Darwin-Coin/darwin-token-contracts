/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  DarwinBurner,
  DarwinBurnerInterface,
} from "../../../contracts/DarwinBurner.sol/DarwinBurner";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_darwin",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "burnedTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "darwin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516102d83803806102d883398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161024161009760003960008181604b0152818160c3015261014f01526102416000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633110c7921461004657806344df8e701461008a57806347b5dd5414610094575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100926100ab565b005b61009d60005481565b604051908152602001610081565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610112573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013691906101cc565b604051630852cd8d60e31b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b15801561019b57600080fd5b505af11580156101af573d6000803e3d6000fd5b50505050806000808282546101c491906101e5565b909155505050565b6000602082840312156101de57600080fd5b5051919050565b6000821982111561020657634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220c3f0e98f43ef2bc4fb2fd454b94c0e32998867c8d491ca1737e6018b69d7597d64736f6c634300080e0033";

type DarwinBurnerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DarwinBurnerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DarwinBurner__factory extends ContractFactory {
  constructor(...args: DarwinBurnerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _darwin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DarwinBurner> {
    return super.deploy(_darwin, overrides || {}) as Promise<DarwinBurner>;
  }
  override getDeployTransaction(
    _darwin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_darwin, overrides || {});
  }
  override attach(address: string): DarwinBurner {
    return super.attach(address) as DarwinBurner;
  }
  override connect(signer: Signer): DarwinBurner__factory {
    return super.connect(signer) as DarwinBurner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DarwinBurnerInterface {
    return new utils.Interface(_abi) as DarwinBurnerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DarwinBurner {
    return new Contract(address, _abi, signerOrProvider) as DarwinBurner;
  }
}
